"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3638],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8298:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},i="Read data",s={unversionedId:"walkthrough/read-data",id:"walkthrough/read-data",title:"Read data",description:"Read an object from the store. We will be using store.select() to retrieve data from the store.",source:"@site/docs/walkthrough/read-data.md",sourceDirName:"walkthrough",slug:"/walkthrough/read-data",permalink:"/object-relationship-store/docs/walkthrough/read-data",draft:!1,editUrl:"https://github.com/JoshBot-Debug/object-relationship-store/tree/main/documentation/docs/walkthrough/read-data.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Create data",permalink:"/object-relationship-store/docs/walkthrough/create-data"},next:{title:"Update data",permalink:"/object-relationship-store/docs/walkthrough/update-data"}},l={},p=[{value:"Get object by <code>primaryKey</code>",id:"get-object-by-primarykey",level:2},{value:"Get object by field value",id:"get-object-by-field-value",level:2},{value:"Get many objects",id:"get-many-objects",level:2},{value:"Join objects",id:"join-objects",level:2},{value:"Memonization",id:"memonization",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"read-data"},"Read data"),(0,r.kt)("p",null,"Read an object from the store. We will be using ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select"},(0,r.kt)("inlineCode",{parentName:"a"},"store.select()"))," to retrieve data from the store."),(0,r.kt)("h2",{id:"get-object-by-primarykey"},"Get object by ",(0,r.kt)("inlineCode",{parentName:"h2"},"primaryKey")),(0,r.kt)("p",null,"Select all ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#fields"},(0,r.kt)("inlineCode",{parentName:"a"},"fields"))," ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#from"},(0,r.kt)("inlineCode",{parentName:"a"},"from"))," ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#where"},(0,r.kt)("inlineCode",{parentName:"a"},"where"))," ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is 1."),(0,r.kt)("p",null,"When selecting by ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey"),", you will only receive one object or ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",null,"Try selecting an ID that does not exist."),(0,r.kt)("admonition",{title:"Selecting an object",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When selecting ",(0,r.kt)("inlineCode",{parentName:"p"},"one")," object from the store, selecting by ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey")," is the faster way to get data.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import {posts} from "./data.js";\n\n// Add some data to the store\nstore.mutate(posts);\n\nconst selectedUser = store.select({\n\n  // From the \'user\' model\n  from: "user",\n\n  // Return all fields\n  // try passing ["id", "username"] into fields\n  fields: "*",\n  \n  // Where the ID is 1\n  where: {id: 1},\n})\n\nconsole.log(selectedUser);\n\n')),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"{ id: 1, username: 'the_overlord', profileImage: 52, posts: [ 8, 7 ] }\n")),(0,r.kt)("h2",{id:"get-object-by-field-value"},"Get object by field value"),(0,r.kt)("p",null,"Select all ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#fields"},(0,r.kt)("inlineCode",{parentName:"a"},"fields"))," ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#from"},(0,r.kt)("inlineCode",{parentName:"a"},"from"))," ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#where"},(0,r.kt)("inlineCode",{parentName:"a"},"where"))," ",(0,r.kt)("inlineCode",{parentName:"p"},"username")," starts with ",(0,r.kt)("em",{parentName:"p"},"qw"),"."),(0,r.kt)("p",null,"When selecting by any field that is not the ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey"),", you will receive an array of objects that matched the ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#where"},(0,r.kt)("inlineCode",{parentName:"a"},"where"))," clause."),(0,r.kt)("admonition",{title:"Where clause",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#where"},(0,r.kt)("inlineCode",{parentName:"a"},"where"))," clause accepts an object, an array of objects or a function.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import {posts} from "./data.js";\n\n// Add some data to the store\nstore.mutate(posts);\n\nconst selectedUser = store.select({\n  from: "user",\n  fields: "*",\n  where: {username: "qwerty"},\n  // where: o => o.username.startsWith("qw"),\n})\n\nconsole.log(selectedUser);\n')),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[\n  { id: 2, username: 'qwerty', profileImage: 48, posts: [ 10, 9, 6 ] }\n]\n")),(0,r.kt)("h2",{id:"get-many-objects"},"Get many objects"),(0,r.kt)("p",null,"Select all ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#fields"},(0,r.kt)("inlineCode",{parentName:"a"},"fields"))," ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#from"},(0,r.kt)("inlineCode",{parentName:"a"},"from"))," ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#where"},(0,r.kt)("inlineCode",{parentName:"a"},"where"))," ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," in 1,2."),(0,r.kt)("p",null,"You can get many objects by ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey")," by passing an array of objects into the ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#where"},(0,r.kt)("inlineCode",{parentName:"a"},"where"))," clause"),(0,r.kt)("admonition",{title:"Here's a tip",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When a ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#where"},(0,r.kt)("inlineCode",{parentName:"a"},"where"))," clause contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey")," field, all other fields are ignored and the data is selected by ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},'where: [{id: 1}, {id: 2, username: "Some non existent name"}]')),(0,r.kt)("p",{parentName:"admonition"},"In this ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#where"},(0,r.kt)("inlineCode",{parentName:"a"},"where"))," clause, you will still get ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," 1 and 2.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import {posts} from "./data.js";\n\n// Add some data to the store\nstore.mutate(posts);\n\nconst selectedUser = store.select({\n  from: "user",\n  fields: "*",\n  where: [{id: 1}, {id: 2}],\n  // where: o => [1,2].includes(o.id),\n})\n\nconsole.log(selectedUser);\n')),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[\n  {\n    id: 1,\n    username: 'the_overlord',\n    profileImage: 52,\n    posts: [ 8, 7 ]\n  },\n  { id: 2, username: 'qwerty', profileImage: 48, posts: [ 10, 9, 6 ] }\n]\n")),(0,r.kt)("p",null,"Try running the code below as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import {posts} from "./data.js";\n\n// Add some data to the store\nstore.mutate(posts);\n\nconst selectedUser1 = store.select({\n  from: "user",\n  fields: "*",\n  where: [{id: 1}, {username: "qwerty"}]\n})\n\nconst selectedUser2 = store.select({\n  from: "user",\n  fields: "*",\n  where: [{id: 1}, o => o.username === "qwerty"]\n})\n\nconsole.log(selectedUser1);\nconsole.log(selectedUser2);\n')),(0,r.kt)("h2",{id:"join-objects"},"Join objects"),(0,r.kt)("p",null,"In the examples above, you would have noticed that the field value for ",(0,r.kt)("inlineCode",{parentName:"p"},"profileImage")," was a ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey")," and the value for ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," was an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey"),"."),(0,r.kt)("p",null,"Here we will ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#join"},(0,r.kt)("inlineCode",{parentName:"a"},"join"))," those objects."),(0,r.kt)("admonition",{title:"Join",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"../api/store.select#join"},(0,r.kt)("inlineCode",{parentName:"a"},"join"))," will not work if you do not select that field. In this example, we are selecting all fields ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),",")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import {posts} from "./data.js";\n\n// Add some data to the store\nstore.mutate(posts);\n\nconst selectedUser = store.select({\n  from: "user",\n\n  // Try selecting only ["id", "profileImage"]\n  fields: "*",\n  where: {id: 1},\n  join: [\n    {\n      on: "profileImage",\n      fields: "*",\n      join: [\n        {on: "thumbnails", fields: "*"}\n      ]\n    },\n    {on: "posts", fields: "*"}\n  ]\n})\n\nconsole.log(selectedUser);\n')),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"{\n  id: 1,\n  username: 'the_overlord',\n  profileImage: { id: 52, aspectRatio: 1.38378, thumbnails: [ [Object], [Object] ] },\n  posts: [\n    {\n      id: 8,\n      caption: 'This is post 8',\n      createdAt: '2023-06-21T16:13:41.000Z',\n      images: [Array],\n      user: 1\n    },\n    {\n      id: 7,\n      caption: 'This is post 7',\n      createdAt: '2023-06-21T13:48:10.000Z',\n      images: [Array],\n      user: 1\n    }\n  ]\n}\n")),(0,r.kt)("h2",{id:"memonization"},"Memonization"),(0,r.kt)("p",null,"Results are memonized"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import {posts} from "./data.js";\n\n// Add some data to the store\nstore.mutate(posts);\n\nconst a = store.select({ from: "user", fields: ["id"], where: {id: 1} })\n\nconst b = store.select({ from: "user", fields: ["id"], where: {id: 1} })\n\nconst c = store.select({ from: "user", fields: ["id"], where: o => o.id === 1 })\n\nconst d = store.select({ from: "user", fields: ["id"], where: o => o.id === 1 })\n\nconst e = store.select({ from: "user", fields: ["id"], where: o => o.id === 2 })\n\n// A and B are the same\nconsole.log(a === b);\n\n// A and C are NOT the same\nconsole.log(a === c);\n\n// C and D are the same\nconsole.log(c === d);\n\n// C and E are NOT the same\nconsole.log(c === e);\n')))}c.isMDXComponent=!0}}]);