"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4927],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,f=u["".concat(l,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var d=2;d<a;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5811:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:5},s="Update data",i={unversionedId:"walkthrough/update-data",id:"walkthrough/update-data",title:"Update data",description:"Update an object in the store",source:"@site/docs/walkthrough/update-data.md",sourceDirName:"walkthrough",slug:"/walkthrough/update-data",permalink:"/object-relationship-store/docs/walkthrough/update-data",draft:!1,editUrl:"https://github.com/JoshBot-Debug/object-relationship-store/tree/main/documentation/docs/walkthrough/update-data.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Read data",permalink:"/object-relationship-store/docs/walkthrough/read-data"},next:{title:"Delete data",permalink:"/object-relationship-store/docs/walkthrough/delete-data"}},l={},d=[{value:"Update an object",id:"update-an-object",level:2},{value:"Deep Update",id:"deep-update",level:2},{value:"Update foreign key references",id:"update-foreign-key-references",level:2},{value:"Remove a foreign key reference",id:"remove-a-foreign-key-reference",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"update-data"},"Update data"),(0,o.kt)("p",null,"Update an object in the store"),(0,o.kt)("h2",{id:"update-an-object"},"Update an object"),(0,o.kt)("p",null,"Updating an object is the same as setting an object in the store. The only difference here is that the object with that ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryKey")," already exists in the store."),(0,o.kt)("p",null,"Here we will add a ",(0,o.kt)("strong",{parentName:"p"},"new")," user object into the store and then ",(0,o.kt)("strong",{parentName:"p"},"update")," it."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Read ",(0,o.kt)("a",{parentName:"em",href:"../api/store.mutate"},(0,o.kt)("inlineCode",{parentName:"a"},"store.mutate()")),". For more information on dealing with many objects, etc."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'\nconst userObject = {\n  id: 1,\n  username: "the_overlord",\n}\n\nconst getUserOne = () => store.select({ from: "user", fields: ["id", "username"], where: {id: 1} })\n\nstore.mutate(userObject);\n\nconsole.log("Before", getUserOne())\n\nconst updatedUser = {\n  id: 1,\n  username: "Update Name",\n}\n\nstore.mutate(updatedUser);\n\nconsole.log("After", getUserOne())\n')),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Before { id: 1, username: 'the_overlord' }\nAfter { id: 1, username: 'Update Name' }\n")),(0,o.kt)("h2",{id:"deep-update"},"Deep Update"),(0,o.kt)("p",null,"If a new object is set in the store, and the object contains a child that already exists, it will be updated if there are changes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import { posts } from "./data.js";\n\nstore.mutate(posts);\n\nconst getUserOne = () => store.select({ from: "user", fields: ["id", "username"], where: {id: 1} })\n\nconsole.log("Before", getUserOne())\n\nconst updatedPost = {\n  id: 8,\n  __identify__: "post",\n  user: {\n    id: 1,\n    username: "Updated!"\n  }\n}\n\nstore.mutate(updatedPost);\n\nconsole.log("After", getUserOne())\n')),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Before { id: 1, username: 'the_overlord' }\nAfter { id: 1, username: 'Updated!' }\n")),(0,o.kt)("h2",{id:"update-foreign-key-references"},"Update foreign key references"),(0,o.kt)("p",null,"Let's say we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," object, the post belongs to ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," 1 and we want to change it to ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," 2."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import { posts } from "./data.js";\n\nstore.mutate(posts);\n\nconst getPost = () => store.select({\n  from: "post",\n  fields: ["id", "user"],\n  where: { id: 8 },\n  join: [{ on: "user", fields: ["id", "username"] }]\n})\n\nconsole.log("Before", getPost())\n\nconst updatedPost = {\n  id: 8,\n  __identify__: "post",\n  user: 2\n  // user: {id: 2, __identify__: "user"}\n}\n\nstore.mutate(updatedPost);\n\nconsole.log("After", getPost())\n')),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Before { id: 8, user: { id: 1, username: 'the_overlord' } }\nAfter { id: 8, user: { id: 2, username: 'qwerty' } }\n")),(0,o.kt)("h2",{id:"remove-a-foreign-key-reference"},"Remove a foreign key reference"),(0,o.kt)("p",null,"Sometimes we may want to remove a foreign key reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import { posts } from "./data.js";\n\nstore.mutate(posts);\n\nconst getPost = () => store.select({\n  from: "post",\n  fields: ["id", "user"],\n  where: { id: 8 },\n  join: [{ on: "user", fields: ["id", "username"] }]\n})\n\nconst getUser = () => store.select({\n  from: "user",\n  fields: ["id", "posts"],\n  where: { id: 1 },\n})\n\n\nconsole.log("Post Before", getPost())\nconsole.log("User Before", getUser())\n\nconst updatedPost = {\n  id: 8,\n  __identify__: "post",\n  user: null // set as null to remove the reference\n}\n\nstore.mutate(updatedPost);\n\nconsole.log("Post After", getPost())\nconsole.log("User After", getUser())\n')),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Post Before { id: 8, user: { id: 1, username: 'the_overlord' } }\nUser Before { id: 1, posts: [ 8, 7 ] }\nPost After { id: 8 }\nUser After { id: 1, posts: [ 7 ] }\n")),(0,o.kt)("p",null,"This can also be done the other way around by removing ",(0,o.kt)("inlineCode",{parentName:"p"},"post")," 7 from ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import { posts } from "./data.js";\n\nstore.mutate(posts);\n\nconst getPost = () => store.select({\n  from: "post",\n  fields: ["id", "user"],\n  where: { id: 8 },\n  join: [{ on: "user", fields: ["id", "username"] }]\n})\n\nconst getUser = () => store.select({\n  from: "user",\n  fields: ["id", "posts"],\n  where: { id: 1 },\n})\n\n\nconsole.log("Post Before", getPost())\nconsole.log("User Before", getUser())\n\nconst updatedPost = {\n  id: 1,\n  __identify__: "user",\n  posts: [7] // removing post 8 from user 1\n}\n\nstore.mutate(updatedPost);\n\nconsole.log("Post After", getPost())\nconsole.log("User After", getUser())\n')),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Post Before { id: 8, user: { id: 1, username: 'the_overlord' } }\nUser Before { id: 1, posts: [ 8, 7 ] }\nPost After { id: 8 }\nUser After { id: 1, posts: [ 7 ] }\n")))}c.isMDXComponent=!0}}]);