"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=o,h=m["".concat(d,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9798:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:7},r="Pagination",s={unversionedId:"walkthrough/pagination",id:"walkthrough/pagination",title:"Pagination",description:"There is a special type of object we use to handle data on different pages where the order matters.",source:"@site/docs/walkthrough/pagination.md",sourceDirName:"walkthrough",slug:"/walkthrough/pagination",permalink:"/object-relationship-store/docs/walkthrough/pagination",draft:!1,editUrl:"https://github.com/JoshBot-Debug/object-relationship-store/tree/main/documentation/docs/walkthrough/pagination.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docsSidebar",previous:{title:"Delete data",permalink:"/object-relationship-store/docs/walkthrough/delete-data"},next:{title:"APIs",permalink:"/object-relationship-store/docs/category/apis"}},d={},l=[{value:"The problem",id:"the-problem",level:2},{value:"The solution",id:"the-solution",level:2},{value:"Setting up <code>createRelationalObjectIndex()</code>",id:"setting-up-createrelationalobjectindex",level:2},{value:"Naming, Creating and Selecting from the object index",id:"naming-creating-and-selecting-from-the-object-index",level:2},{value:"Using the object index for pagination",id:"using-the-object-index-for-pagination",level:2},{value:"Home Page",id:"home-page",level:3},{value:"Profile Page",id:"profile-page",level:3},{value:"Add a new post.",id:"add-a-new-post",level:3},{value:"Remove a post.",id:"remove-a-post",level:3}],p={toc:l},m="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pagination"},"Pagination"),(0,o.kt)("p",null,"There is a special type of object we use to handle data on different pages where the order matters."),(0,o.kt)("h2",{id:"the-problem"},"The problem"),(0,o.kt)("p",null,"Here is the problem we face when dealing with ",(0,o.kt)("strong",{parentName:"p"},"feeds"),". ",(0,o.kt)("em",{parentName:"p"},"(Infinite scrolling feeds on mobile apps/web apps)")),(0,o.kt)("p",null,"Let's say we have ",(0,o.kt)("strong",{parentName:"p"},"two")," types of pages in our app that have ",(0,o.kt)("strong",{parentName:"p"},"feeds"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Home Feed")," - Which contains many posts"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Profile Feed")," - Which contains many posts created by that user, liked by that user or even shared by that user.")),(0,o.kt)("p",null,"Everytime we visit the ",(0,o.kt)("inlineCode",{parentName:"p"},"Home Page")," we need to see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Home Feed"),", when we click on a ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile Page"),", we need to see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile Feed")," for that user id. The order in which the posts come in is important."),(0,o.kt)("p",null,"When we add a new ",(0,o.kt)("inlineCode",{parentName:"p"},"object")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"store"),", we need to update a given feed."),(0,o.kt)("p",null,"Let's say we create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," and the server returns the new ",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),", now we add it in the store, then next thing we need to do is add it to our ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile Feed")," where the userId is our id, and we need to add it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Home Feed"),"."),(0,o.kt)("h2",{id:"the-solution"},"The solution"),(0,o.kt)("p",null,"Instead of manually handling adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," to certain pages after some action, it would be better if the ",(0,o.kt)("inlineCode",{parentName:"p"},"post")," just adds itself and sorts itself correctly."),(0,o.kt)("p",null,"This is why we have ",(0,o.kt)("a",{parentName:"p",href:"../api/createRelationalObjectIndex"},(0,o.kt)("inlineCode",{parentName:"a"},"createRelationalObjectIndex()")),". We can create an index that ",(0,o.kt)("a",{parentName:"p",href:"../api/createRelationalObjectIndex#sort"},(0,o.kt)("inlineCode",{parentName:"a"},"sorts"))," our objects and maintains an index for us to perform ",(0,o.kt)("a",{parentName:"p",href:"../api/store.select"},(0,o.kt)("inlineCode",{parentName:"a"},"select"))," operations on."),(0,o.kt)("h2",{id:"setting-up-createrelationalobjectindex"},"Setting up ",(0,o.kt)("a",{parentName:"h2",href:"../api/createRelationalObjectIndex"},(0,o.kt)("inlineCode",{parentName:"a"},"createRelationalObjectIndex()"))),(0,o.kt)("p",null,"First we need to define an index and pass it to our ",(0,o.kt)("a",{parentName:"p",href:"../api/createStore#indexes"},(0,o.kt)("inlineCode",{parentName:"a"},"createStore()"))," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'const user = createRelationalObject("user")\nconst image = createRelationalObject("image")\nconst thumbnail = createRelationalObject("thumbnail")\nconst post = createRelationalObject("post")\n\npost.hasOne(user)\npost.hasMany(image, "images")\nuser.hasOne(image, "profileImage")\nimage.hasMany(thumbnail, "thumbnails")\nuser.hasMany(post, "posts")\n\n// Create a postFeed index object.\n// createRelationalObjectIndex(name, ORS.RelationalCreator[], sortingFunction)\nconst postFeed = createRelationalObjectIndex("postFeed", [post], (a, b) => a.id > b.id ? 1 : -1)\n\nconst store = createStore({\n\n  relationalCreators: [\n    user,\n    image,\n    thumbnail,\n    post,\n  ],\n\n  // Pass all indexes here\n  indexes: [\n    postFeed\n  ],\n\n  identifier: {\n    user: o => "username" in o,\n    post: o => "caption" in o,\n    image: o => "aspectRatio" in o,\n    thumbnail: o => "uri" in o,\n  }\n});\n')),(0,o.kt)("h2",{id:"naming-creating-and-selecting-from-the-object-index"},"Naming, Creating and Selecting from the object index"),(0,o.kt)("p",null,"One important thing to note is how object indexes are named."),(0,o.kt)("p",null,"We named the index ",(0,o.kt)("strong",{parentName:"p"},"postFeed")),(0,o.kt)("p",null,"We selected the data using ",(0,o.kt)("a",{parentName:"p",href:"../api/store.selectIndex"},(0,o.kt)("inlineCode",{parentName:"a"},"store.selectIndex()"))),(0,o.kt)("admonition",{title:"Important Links",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Read up on ",(0,o.kt)("a",{parentName:"p",href:"../api/createRelationalObjectIndex"},(0,o.kt)("inlineCode",{parentName:"a"},"createRelationalObjectIndex()"))," and ",(0,o.kt)("a",{parentName:"p",href:"../api/store.mutate#__indexes__"},(0,o.kt)("inlineCode",{parentName:"a"},"__indexes__"))," for more information")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const postFeed = createRelationalObjectIndex("postFeed", [post], (a, b) => a.id > b.id ? -1 : 1)\n')),(0,o.kt)("p",null,"When we upsert data into this feed, we need to specify the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"name"),"-",(0,o.kt)("inlineCode",{parentName:"strong"},"uniqueKey")),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueKey")," can be anything. If this index contained posts related to a particular ",(0,o.kt)("inlineCode",{parentName:"p"},"userId"),", the name would have been something like ",(0,o.kt)("inlineCode",{parentName:"p"},"postFeed-1"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'store.mutate({...myPost}, {__indexes__: ["postFeed-home"]});\n')),(0,o.kt)("p",null,"When we select data from this index using a ",(0,o.kt)("a",{parentName:"p",href:"../api/store.selectIndex#name"},(0,o.kt)("inlineCode",{parentName:"a"},"name")),", we need to use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"name"),"-",(0,o.kt)("inlineCode",{parentName:"strong"},"uniqueKey"))," to identify the index and pass a ",(0,o.kt)("a",{parentName:"p",href:"../api/store.select"},(0,o.kt)("inlineCode",{parentName:"a"},"selector"))," for that object"),(0,o.kt)("admonition",{title:"Important Links",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Read up on ",(0,o.kt)("a",{parentName:"p",href:"../api/store.selectIndex"},(0,o.kt)("inlineCode",{parentName:"a"},"store.selectIndex()"))," for more information")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const homeFeed = store.selectIndex(\n  // The name of the index (name-uniqueKey)\n  `postFeed-home`,\n  {\n    // This index contains post objects, so pass a selector for post\n    // This is optional\n    post: {\n      from: "post",\n      fields: "*",\n    }\n  }\n)\n')),(0,o.kt)("h2",{id:"using-the-object-index-for-pagination"},"Using the object index for pagination"),(0,o.kt)("p",null,"Lets do this using examples."),(0,o.kt)("p",null,"We will make use of ",(0,o.kt)("a",{parentName:"p",href:"../api/withOptions"},(0,o.kt)("inlineCode",{parentName:"a"},"withOptions()"))," here."),(0,o.kt)("h3",{id:"home-page"},"Home Page"),(0,o.kt)("p",null,"Here we retrieve many posts from a server."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'import { posts } from "./data.js";\n\n// We got many posts from our API request.\n// Endpoint: /home\nconst results = posts;\n\n// Here we upsert these posts into the store.\n// We also use __indexes__ to tell the store that these posts belong to the index \'postFeed-home\'\nstore.mutate(withOptions(results, {__indexes__: ["postFeed-home"]}));\n\n// With a custom selector for posts\nconst homeFeed = store.selectIndex(`postFeed-home`, {\n  post: {\n    from: "post",\n    fields: ["id"],\n  }\n})\n\n// Without a custom selector\n// const homeFeed = store.selectIndex(`postFeed-home`)\n\n\nconsole.log("homeFeed", homeFeed)\n')),(0,o.kt)("p",null,"We received all posts in decending order because of our ",(0,o.kt)("a",{parentName:"p",href:"../api/createRelationalObjectIndex#sort"},(0,o.kt)("inlineCode",{parentName:"a"},"sort"))," function\nRun ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"homeFeed [ { id: 10 }, { id: 9 }, { id: 8 }, { id: 7 }, { id: 6 } ]\n")),(0,o.kt)("h3",{id:"profile-page"},"Profile Page"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="example-project/index.js"',title:'"example-project/index.js"'},'// ...Home Page Code...\n\n// Endpoint: /user/1\n\n// In reality, all the results will belond to user 1 so we just upsert it like this.\n// store.mutate(withOptions(results, {__indexes__: ["postFeed-1"]}));\n\n// However, in this example, posts contain everyting, even user 2 posts, so we will filter it\nstore.mutate(withOptions(results, {__indexes__: o => o.user.id === 1 ? ["postFeed-1"] : undefined}));\n\nconst profileFeed = store.selectIndex(`postFeed-1`, {\n  post: {\n    from: "post",\n    fields: ["id"],\n  }\n})\n\nconsole.log("profileFeed", profileFeed)\n')),(0,o.kt)("p",null,"We received all posts in decending order because of our ",(0,o.kt)("a",{parentName:"p",href:"../api/createRelationalObjectIndex#sort"},(0,o.kt)("inlineCode",{parentName:"a"},"sort"))," function\nRun ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"profileFeed [ { id: 8 }, { id: 7 } ]\nhomeFeed [ { id: 10 }, { id: 9 }, { id: 8 }, { id: 7 }, { id: 6 } ]\n")),(0,o.kt)("h3",{id:"add-a-new-post"},"Add a new post."),(0,o.kt)("p",null,"Let's say we scroll down on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile Feed")," and we get a new post that belongs to user 1. We want that post to be present on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile Feed")," but not on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Home Feed"),"."),(0,o.kt)("p",null,"If you've done a feed, I'm sure you know why that is."),(0,o.kt)("p",null,"However, if it's not clear, here is a better explaination."),(0,o.kt)("p",null,"On the ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile Feed"),", we scroll down and eventually load all posts that were created by that user. When we go back to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Home Feed"),", we do not want to see those posts on the home feed because the order would be wrong. When you scroll down on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Home Feed"),", you'll keep seeing the oldest post created by user 1 because the ",(0,o.kt)("inlineCode",{parentName:"p"},"Home Feed")," is sorted by id."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Home Feed")," index and ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile Feed")," index must maintain a seperate index."),(0,o.kt)("p",null,"The user created a new post, it needs to be added to both feeds"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// ...Home Page Code...\n// ...Profile Page Code...\n\n// The user created a new post, it needs to be added to both feeds\nconst createdPost = {id: 11}\nstore.mutate(withOptions(createdPost, { __identify__: "post", __indexes__: ["postFeed-1", "postFeed-home"] }));\n\nconsole.log("profileFeed", store.selectIndex(`postFeed-home`, {\n  post: {\n    from: "post",\n    fields: ["id"],\n  }\n}))\n\nconsole.log("homeFeed", store.selectIndex(`postFeed-1`, {\n  post: {\n    from: "post",\n    fields: ["id"],\n  }\n}))\n')),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"profileFeed [ { id: 11 }, { id: 8 }, { id: 7 } ]\nhomeFeed [ { id: 11 }, { id: 10 }, { id: 9 }, { id: 8 }, { id: 7 }, { id: 6 } ]\n")),(0,o.kt)("h3",{id:"remove-a-post"},"Remove a post."),(0,o.kt)("p",null,"The user deleted a post/hide a post, it needs to be remove from both feeds"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Check ",(0,o.kt)("a",{parentName:"p",href:"../api/store.mutate#__destroy__"},(0,o.kt)("inlineCode",{parentName:"a"},"__destroy__")),", ",(0,o.kt)("a",{parentName:"p",href:"../api/store.mutate#__identify__"},(0,o.kt)("inlineCode",{parentName:"a"},"__identify__"))," and ",(0,o.kt)("a",{parentName:"p",href:"../api/store.mutate#__removefromindexes__"},(0,o.kt)("inlineCode",{parentName:"a"},"__removeFromIndexes__")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Delete the post that was added\n// store.mutate({id: 8, __identify__: "post", __destroy__: true});\n\n// Keep the post, just remove it from the index(s)\nstore.mutate({id: 8, __identify__: "post", __removeFromIndexes__: ["postFeed-1", "postFeed-home"] });\n\nconsole.log("profileFeed", store.selectIndex(`postFeed-home`, {\n  post: {\n    from: "post",\n    fields: ["id"],\n  }\n}))\n\nconsole.log("homeFeed", store.selectIndex(`postFeed-1`, {\n  post: {\n    from: "post",\n    fields: ["id"],\n  }\n}))\n')),(0,o.kt)("p",null,"As you can see, post with id 8 has been removed from both indexes\nRun ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and you should see this in the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ProfileFeed [ { id: 11 }, { id: 10 }, { id: 9 }, { id: 7 }, { id: 6 } ]\nhomeFeed [ { id: 11 }, { id: 7 } ]\n")))}c.isMDXComponent=!0}}]);